const Claim = require('../models/claim');

function generateClaimId() {
  const numbers = Math.floor(100 + Math.random() * 900);
  const letters = Array(3).fill('').map(() =>
    String.fromCharCode(65 + Math.floor(Math.random() * 26))
  ).join('');
  return `${numbers}${letters}`;
}

exports.getClaims = async (filters) => {
  return await Claim.find(filters).sort({ createdAt: -1 });
};

exports.submitClaim = async (body, files) => {
  const {
    fullName, email, reason, customReason,
    explanation, street, city, state, pincode
  } = body;

  const photoPaths = (files['photos'] || []).map(file => file.path);
  const policeReportPath = files['policeReport']?.[0]?.path || null;

  const newClaim = new Claim({
    claimId: generateClaimId(),
    fullName,
    email: email.toLowerCase(),
    reason,
    customReason,
    explanation,
    location: { street, city, state, pincode },
    photos: photoPaths,
    policeReport: policeReportPath,
    status: 'OPEN',
    rejectionReason: null,
    adminFinalStatus: 'PENDING',
    adminRejectionReason: null
  });

  return await newClaim.save();
};

exports.updateAgentStatus = async (claimId, status, rejectionReason = null) => {
  return await Claim.findOneAndUpdate(
    { claimId },
    {
      status,
      rejectionReason: status === 'REJECTED' ? rejectionReason : null
    },
    { new: true }
  );
};

exports.updateAdminStatus = async (claimId, adminFinalStatus, adminRejectionReason = null) => {
  return await Claim.findOneAndUpdate(
    { claimId },
    {
      adminFinalStatus,
      adminRejectionReason: adminFinalStatus === 'ADMIN_REJECTED' ? adminRejectionReason : null
    },
    { new: true }
  );
};
